{"remainingRequest":"F:\\Projects\\fanexus\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\Projects\\fanexus\\src\\components\\Community\\CommunityEditModal.vue?vue&type=style&index=0&id=1a1ac910&lang=scss&scoped=true&","dependencies":[{"path":"F:\\Projects\\fanexus\\src\\components\\Community\\CommunityEditModal.vue","mtime":1598010030132},{"path":"F:\\Projects\\fanexus\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\Projects\\fanexus\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"F:\\Projects\\fanexus\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"F:\\Projects\\fanexus\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\Projects\\fanexus\\node_modules\\style-resources-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\Projects\\fanexus\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\Projects\\fanexus\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmVkaXQtY29tbXVuaXR5IHsNCiAgZ3JpZC1hcmVhOiBjb250ZW50Ow0KICBvdmVyZmxvdzogYXV0bzsNCiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tQkctcHJpbWFyeSk7DQogICZfX2FkZC1iZyB7DQogICAgOjp2LWRlZXAgLmJ1dHRvbiB7DQogICAgICBwYWRkaW5nOiA4cHggdmFyKC0tZWxlbWVudC1wYWRkaW5nLXh4bCk7DQogICAgfQ0KICB9DQp9DQo="},{"version":3,"sources":["CommunityEditModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CommunityEditModal.vue","sourceRoot":"src/components/Community","sourcesContent":["<template>\r\n  <div class=\"edit-community\" v-if=\"data\">\r\n    <modal\r\n      class=\"edit-community-modal modal-overlay--centered\"\r\n      :settings=\"settings\"\r\n      @save=\"handleSave\"\r\n      :closeOnSave=\"false\"\r\n    >\r\n      <template slot=\"body\">\r\n        <add-image\r\n          :type=\"blogImageTypes.coverImage\"\r\n          class=\"edit-community__add-bg\"\r\n          button-text=\"Add Background\"\r\n          @add=\"handleAddImage\"\r\n        >\r\n          <wallpaper :src=\"coverImageData\" />\r\n        </add-image>\r\n        <tabs\r\n          :tabs=\"navTabs\"\r\n          @selectTab=\"$active => setComponent($active, $active)\"\r\n          :active=\"activeTab\"\r\n        />\r\n        <component\r\n          :is=\"currentComponent\"\r\n          v-model=\"data\"\r\n          :errors=\"errors\"\r\n          @clear-error=\"clearError\"\r\n        />\r\n      </template>\r\n    </modal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapActions } from 'vuex';\r\nimport { feedTypes } from '@/services/feed.service';\r\nimport getComponentsByPrefix from '@/utils/getComponentsByPrefix';\r\nimport Wallpaper from '~common/Wallpaper';\r\nimport Modal from '~common/Modal';\r\nimport AddImage from '../common/AddImage';\r\nimport Tabs from '~common/Tabs';\r\nimport tabsMixin from '@/mixins/tabs.mixin';\r\nimport validationMixin from '@/mixins/validation.mixin';\r\nimport {\r\n  getCommunity,\r\n  editCommunity,\r\n  blogImageTypes,\r\n  communityRoot,\r\n  communityEditAreas\r\n} from '@/services/Community/community.service';\r\nimport CommunityProfile from '@/components/Community/CommunityProfile';\r\nimport CommunitySettings from '@/components/Community/CommunitySettings';\r\n\r\nexport default {\r\n  components: {\r\n    AddImage,\r\n    Wallpaper,\r\n    Modal,\r\n    Tabs,\r\n    CommunityProfile,\r\n    CommunitySettings\r\n  },\r\n  props: {\r\n    id: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    settings: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  mixins: [tabsMixin, validationMixin],\r\n  data() {\r\n    return {\r\n      blogImageTypes,\r\n      activeTab: 0,\r\n      currentComponent: 'community-profile',\r\n      navTabs: [\r\n        {\r\n          title: 'Profile',\r\n          component: communityEditAreas.profile\r\n        },\r\n        {\r\n          title: 'Settings',\r\n          component: communityEditAreas.settings\r\n        }\r\n      ],\r\n      data: null,\r\n      errors: []\r\n    };\r\n  },\r\n  computed: {\r\n    coverImageData() {\r\n      if (!this.data || !this.data.coverImage) return '';\r\n\r\n      return this.data.coverImage.accessUrl || this.data.coverImage.src;\r\n    },\r\n    communityEditComponents() {\r\n      return getComponentsByPrefix.call(this, communityRoot);\r\n    },\r\n    ...mapState({\r\n      activeAliasId: state => state.alias.activeAliasId\r\n    })\r\n  },\r\n  methods: {\r\n    setComponent(tabIndex = 0, componentIndex = 0) {\r\n      this.handleSetActiveTab(tabIndex);\r\n      this.currentComponent = ['community-profile', 'community-settings'][\r\n        componentIndex\r\n      ];\r\n    },\r\n    handleAddImage({ type, data }) {\r\n      this.data[type] = data;\r\n    },\r\n\r\n    async handleSave() {\r\n      /** @TODO revise */\r\n      const {\r\n        name,\r\n        link,\r\n        links,\r\n        description,\r\n        coverImage,\r\n        contentAccessControl,\r\n        followsAccessControl,\r\n        commentsAccessControl,\r\n        postingAccessControl,\r\n        membersAccessControl,\r\n        reactionsAccessControl\r\n      } = this.data;\r\n      const payload = {\r\n        alias: this.activeAliasId,\r\n        contentAccessControl,\r\n        followsAccessControl,\r\n        postingAccessControl,\r\n        commentsAccessControl,\r\n        membersAccessControl,\r\n        reactionsAccessControl,\r\n        name,\r\n        link,\r\n        links,\r\n        description,\r\n        rules: this.data.communityRules.map(({ name, description }) => ({\r\n          name,\r\n          description\r\n        })),\r\n        tagNames: this.data.Tags.map(({ name }) => name)\r\n      };\r\n      /** @TODO make it common between blog and community */\r\n      payload.rules = payload.rules.filter(\r\n        rules => rules.name.length || rules.description.length\r\n      );\r\n      payload.links = payload.links.filter(link => link.length);\r\n\r\n      /** @TODO make it common between blog and community */\r\n      if (coverImage && coverImage.accessUrl) {\r\n        payload.coverImage = coverImage;\r\n      }\r\n\r\n      try {\r\n        await editCommunity(this.data.id, payload);\r\n        this.getFeedData({\r\n          id: link || this.data.id,\r\n          pagination: 1,\r\n          type: feedTypes.community\r\n        });\r\n        this.$router.push({\r\n          name: 'community',\r\n          params: {\r\n            id: link\r\n          }\r\n        });\r\n      } catch (e) {\r\n        this.errors = e.response.data.errors;\r\n      }\r\n    },\r\n    ...mapActions(['getFeedData'])\r\n  },\r\n  async mounted() {\r\n    this.data = (result => ({\r\n      ...result,\r\n      rules: result.communityRules.map(({ name, description }) => ({\r\n        name,\r\n        description\r\n      }))\r\n    }))(\r\n      await getCommunity({\r\n        id: this.id,\r\n        pagination: 1\r\n      })\r\n    );\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.edit-community {\r\n  grid-area: content;\r\n  overflow: auto;\r\n  background-color: var(--BG-primary);\r\n  &__add-bg {\r\n    ::v-deep .button {\r\n      padding: 8px var(--element-padding-xxl);\r\n    }\r\n  }\r\n}\r\n</style>\r\n"]}]}