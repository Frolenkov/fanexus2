{"remainingRequest":"I:\\Projects\\fanexus\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!I:\\Projects\\fanexus\\src\\components\\Community\\CommunityModerators.vue?vue&type=style&index=0&id=3b614111&lang=scss&scoped=true&","dependencies":[{"path":"I:\\Projects\\fanexus\\src\\components\\Community\\CommunityModerators.vue","mtime":1593690156877},{"path":"I:\\Projects\\fanexus\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"I:\\Projects\\fanexus\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"I:\\Projects\\fanexus\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"I:\\Projects\\fanexus\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"I:\\Projects\\fanexus\\node_modules\\style-resources-loader\\lib\\index.js","mtime":499162500000},{"path":"I:\\Projects\\fanexus\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"I:\\Projects\\fanexus\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQo6OnYtZGVlcCAuZ3JvdXAtdGl0bGUgew0KICAmX190ZXh0IHsNCiAgICBmb250LXNpemU6IHZhcigtLXNpemUtYnV0dG9uKTsNCiAgfQ0KfQ0K"},{"version":3,"sources":["CommunityModerators.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuGA;AACA;AACA;AACA;AACA","file":"CommunityModerators.vue","sourceRoot":"src/components/Community","sourcesContent":["<template>\r\n  <section class=\"moderators\">\r\n    <tab-content-grid :showSearch=\"true\" title=\"Moderators\">\r\n      <group-component\r\n        v-for=\"({ id, name, avatar, updatedAt }, index) in groups\"\r\n        :key=\"`${id}-${index}`\"\r\n        @delete=\"showModal(id)\"\r\n        activityName=\"Updated at\"\r\n        :date=\"updatedAt\"\r\n        :name=\"name\"\r\n        :image=\"avatar ? avatar.src : ''\"\r\n      />\r\n      <confirmation-modal\r\n        @submit=\"deleteModerator\"\r\n        v-if=\"settings.show\"\r\n        :settings=\"settings\"\r\n      />\r\n    </tab-content-grid>\r\n  </section>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'vuex';\r\nimport {\r\n  communityAreas,\r\n  getModerators,\r\n  removeModerators\r\n} from '@/services/Community/community.service';\r\nimport GroupComponent from '@/components/Blog/GroupComponent';\r\nimport TabContentGrid from '../common/TabContentGrid';\r\nimport ConfirmationModal from '../common/ConfirmationModal';\r\nimport { deleteItemById } from '@/utils/array';\r\n\r\nexport default {\r\n  name: communityAreas.moderators,\r\n  components: {\r\n    GroupComponent,\r\n    TabContentGrid,\r\n    ConfirmationModal\r\n  },\r\n  props: {\r\n    communityId: {\r\n      type: [Number, String],\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      data: null,\r\n      groups: [],\r\n      activeItem: null,\r\n      settings: {\r\n        show: false,\r\n        title: 'Delete moderator',\r\n        /** @TODO make 'Cancel' a default dismissText  */\r\n        removedItem: 'user',\r\n        removedFrom: 'moderators',\r\n        dismissText: 'Cancel',\r\n        actionText: 'Delete',\r\n        data: []\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    handleModalOpen(modalType) {\r\n      this.$emit('openModal', { type: modalType });\r\n    },\r\n    showModal(id) {\r\n      this.activeItem = id;\r\n      this.settings.show = true;\r\n    },\r\n    removeItemFromArray() {\r\n      deleteItemById(this.activeItem, this.groups, () => {\r\n        this.activeItem = null;\r\n      });\r\n    },\r\n    async deleteModerator() {\r\n      const payload = {\r\n        alias: this.activeAliasId,\r\n        moderators: [this.activeItem]\r\n      };\r\n      try {\r\n        await removeModerators(this.communityId, payload);\r\n        this.removeItemFromArray();\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n    },\r\n    async getData() {\r\n      this.groups = await getModerators(this.communityId, 1);\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      activeAliasId: state => state.alias.activeAliasId\r\n    })\r\n  },\r\n  async mounted() {\r\n    await this.getData();\r\n  }\r\n};\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n::v-deep .group-title {\r\n  &__text {\r\n    font-size: var(--size-button);\r\n  }\r\n}\r\n</style>\r\n"]}]}