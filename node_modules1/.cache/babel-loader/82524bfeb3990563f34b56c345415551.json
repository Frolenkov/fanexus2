{"remainingRequest":"F:\\Projects\\fanexus\\node_modules\\babel-loader\\lib\\index.js!F:\\Projects\\fanexus\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\Projects\\fanexus\\src\\store\\modules\\alias.module.js","dependencies":[{"path":"F:\\Projects\\fanexus\\src\\store\\modules\\alias.module.js","mtime":1598358775521},{"path":"F:\\Projects\\fanexus\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\Projects\\fanexus\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\Projects\\fanexus\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["F:/Projects/fanexus/src/store/modules/alias.module.js"],"names":["getUserAliases","setActiveAliasApi","getActiveAliasDataApi","getAliasFollowingCount","getBlogFollowersCount","getBlogLikesCount","getNewActivitiesCount","watchActivitiesCount","unwatchActivitiesCount","getActiveAliasStorage","setActiveAliasStorage","removeActiveAliasStorage","state","activeAliasStats","userAliases","activeAliasId","activeAliasData","getters","getActiveAliasAvatarSrc","avatar","src","activeAliasBlog","activeAlias","find","alias","id","Blog","activeAliasBlogUrl","undefined","link","activeAliasBlogId","actions","getActiveAliasStats","commit","blog","Promise","all","following","followers","likes","activities","watchActiveAliasActivitiesCount","dispatch","code","unwatchActiveAliasActivitiesCount","payload","initActiveAlias","setActiveAlias","removeActiveAlias","clearUserAliases","updateActiveAliasData","newActiveAliasData","mutations","setUserAliases","setActiveAliasStats","setActiveAliasData"],"mappings":"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","sourcesContent":["import {\r\n  getUserAliases,\r\n  setActiveAliasApi,\r\n  getActiveAliasDataApi,\r\n  getAliasFollowingCount\r\n} from '@/services/alias.service';\r\nimport {\r\n  getBlogFollowersCount,\r\n  getBlogLikesCount\r\n} from '@/services/Blog/blog.service';\r\nimport {\r\n  getNewActivitiesCount,\r\n  watchActivitiesCount,\r\n  unwatchActivitiesCount\r\n} from '@/services/activities.service';\r\nimport {\r\n  getActiveAliasStorage,\r\n  setActiveAliasStorage,\r\n  removeActiveAliasStorage\r\n} from '@/services/storage.service';\r\n\r\nconst state = {\r\n  activeAliasStats: {},\r\n  userAliases: [],\r\n  activeAliasId: getActiveAliasStorage(),\r\n  activeAliasData: null\r\n};\r\n\r\nconst getters = {\r\n  getActiveAliasAvatarSrc: state => {\r\n    if (state.activeAliasData && state.activeAliasData.avatar) {\r\n      return state.activeAliasData.avatar.src;\r\n    }\r\n\r\n    return '';\r\n  },\r\n  activeAliasBlog(state) {\r\n    const activeAlias =\r\n      state.userAliases &&\r\n      state.userAliases.find(alias => alias.id === state.activeAliasId);\r\n    return activeAlias && activeAlias.Blog;\r\n  },\r\n  activeAliasBlogUrl(undefined, getters) {\r\n    return (\r\n      getters.activeAliasBlog &&\r\n      (getters.activeAliasBlog.link || getters.activeAliasBlog.id)\r\n    );\r\n  },\r\n  activeAliasBlogId(undefined, getters) {\r\n    return getters.activeAliasBlog && getters.activeAliasBlog.id;\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  async getActiveAliasStats({ commit }, { alias, blog }) {\r\n    const [following, followers, likes, activities] = await Promise.all([\r\n      getAliasFollowingCount(alias),\r\n      getBlogFollowersCount(blog),\r\n      getBlogLikesCount(blog),\r\n      getNewActivitiesCount()\r\n    ]);\r\n    commit('setActiveAliasStats', { following, followers, likes, activities });\r\n  },\r\n  async watchActiveAliasActivitiesCount({ commit, dispatch }) {\r\n    try {\r\n      const activities = await watchActivitiesCount();\r\n      if (activities) {\r\n        commit('setActiveAliasStats', { activities });\r\n        dispatch('watchActiveAliasActivitiesCount');\r\n      }\r\n    } catch (e) {\r\n      if (e.code !== 'ECONNABORTED') {\r\n        throw e;\r\n      }\r\n    }\r\n  },\r\n  async unwatchActiveAliasActivitiesCount() {\r\n    await unwatchActivitiesCount();\r\n  },\r\n  async getUserAliases({ commit, state, dispatch }) {\r\n    const payload = await getUserAliases();\r\n    commit('setUserAliases', payload);\r\n    if (!state.activeAliasId) {\r\n      dispatch('initActiveAlias');\r\n    }\r\n  },\r\n  async initActiveAlias({ state, dispatch }) {\r\n    dispatch('setActiveAlias', state.userAliases[0].id);\r\n  },\r\n  async setActiveAlias({ commit }, payload) {\r\n    await setActiveAliasApi(payload);\r\n    setActiveAliasStorage(payload);\r\n    commit('setActiveAlias', payload);\r\n  },\r\n  removeActiveAlias({ commit }) {\r\n    removeActiveAliasStorage();\r\n    commit('removeActiveAlias');\r\n  },\r\n  clearUserAliases({ commit }) {\r\n    commit('clearUserAliases');\r\n  },\r\n  async updateActiveAliasData({ commit, state }) {\r\n    const newActiveAliasData = await getActiveAliasDataApi(state.activeAliasId);\r\n    commit('setActiveAliasData', newActiveAliasData);\r\n  }\r\n};\r\n\r\nconst mutations = {\r\n  setUserAliases(state, payload) {\r\n    state.userAliases = payload;\r\n  },\r\n  setActiveAlias(state, payload) {\r\n    state.activeAliasId = payload;\r\n  },\r\n  setActiveAliasStats(state, payload) {\r\n    state.activeAliasStats = { ...state.activeAliasStats, ...payload };\r\n  },\r\n  removeActiveAlias(state) {\r\n    state.activeAliasId = null;\r\n  },\r\n  clearUserAliases(state) {\r\n    state.userAliases = [];\r\n  },\r\n  setActiveAliasData(state, payload) {\r\n    state.activeAliasData = payload;\r\n  }\r\n};\r\n\r\nexport default {\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n};\r\n"]}]}