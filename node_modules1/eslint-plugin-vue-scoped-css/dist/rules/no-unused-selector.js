"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const selectors_1 = require("../styles/selectors");
const selectors_2 = require("../styles/utils/selectors");
const query_1 = require("../styles/selectors/query");
const elements_1 = require("../styles/selectors/query/elements");
const options_1 = require("../options");
const context_1 = require("../styles/context");
const utils_1 = require("../utils/utils");
function getScopedSelectors(style) {
    const resolvedSelectors = selectors_1.getResolvedSelectors(style);
    return resolvedSelectors.map(getScopedSelector);
}
function getScopedSelector(resolvedSelector) {
    const { selector } = resolvedSelector;
    const deepIndex = selector.findIndex(selectors_2.isDeepCombinator);
    const scopedCandidateSelector = deepIndex >= 0 ? selector.slice(0, deepIndex) : [...selector];
    const results = [];
    for (const sel of scopedCandidateSelector.reverse()) {
        if (selectors_2.isSelectorCombinator(sel)) {
            if (!selectors_2.isChildCombinator(sel) &&
                !selectors_2.isAdjacentSiblingCombinator(sel) &&
                !selectors_2.isGeneralSiblingCombinator(sel)) {
                break;
            }
        }
        results.push(sel);
    }
    return results.reverse();
}
module.exports = {
    meta: {
        docs: {
            description: "Reports selectors defined in Scoped CSS not used in `<template>`.",
            category: "recommended",
            default: "warn",
            url: "https://future-architect.github.io/eslint-plugin-vue-scoped-css/rules/no-unused-selector.html",
        },
        fixable: null,
        messages: {
            unused: "The selector `{{selector}}` is unused.",
        },
        schema: [
            {
                type: "object",
                properties: {
                    ignoreBEMModifier: {
                        type: "boolean",
                    },
                    captureClassesFromDoc: {
                        type: "array",
                        items: [
                            {
                                type: "string",
                            },
                        ],
                        minItems: 0,
                        uniqueItems: true,
                    },
                },
                additionalProperties: false,
            },
        ],
        type: "suggestion",
    },
    create(context) {
        if (!utils_1.hasTemplateBlock(context)) {
            return {};
        }
        const styles = context_1.getStyleContexts(context)
            .filter(context_1.StyleContext.isValid)
            .filter(style => style.scoped);
        if (!styles.length) {
            return {};
        }
        const reporter = context_1.getCommentDirectivesReporter(context);
        const reportedSet = new Set();
        function report(nodes) {
            if (!reportedSet.has(nodes[0])) {
                reporter.report({
                    loc: {
                        start: nodes[0].loc.start,
                        end: nodes[nodes.length - 1].loc.end,
                    },
                    messageId: "unused",
                    data: {
                        selector: nodes.map(n => n.selector).join(""),
                    },
                });
                reportedSet.add(nodes[0]);
            }
        }
        function verifySelector(queryContext, scopedSelector) {
            const reportSelectorNodes = [];
            let targetsQueryContext = queryContext;
            let reverseVerifySelector = [...scopedSelector].reverse();
            while (reverseVerifySelector.length) {
                const combIndex = reverseVerifySelector.findIndex(selectors_2.isSelectorCombinator);
                let comb = null;
                let selectorBlock = [];
                if (combIndex >= 0) {
                    comb = reverseVerifySelector[combIndex];
                    selectorBlock = reverseVerifySelector.slice(0, combIndex);
                    reverseVerifySelector = reverseVerifySelector.slice(combIndex + 1);
                }
                else {
                    selectorBlock = reverseVerifySelector;
                    reverseVerifySelector = [];
                }
                const classSelectors = selectorBlock.filter(selectors_2.isClassSelector);
                const notClassSelectors = selectorBlock.filter(s => selectors_2.isSelectorCombinator(s) ||
                    selectors_2.isTypeSelector(s) ||
                    selectors_2.isIDSelector(s) ||
                    selectors_2.isUniversalSelector(s));
                for (const selectorNode of notClassSelectors) {
                    targetsQueryContext = targetsQueryContext.reverseQueryStep(selectorNode);
                }
                const roots = targetsQueryContext.filter(elements_1.isRootElement);
                if (roots.elements.length) {
                    for (const selectorNode of classSelectors) {
                        if (roots.reverseQueryStep(selectorNode).elements.length) {
                            return;
                        }
                    }
                }
                for (const selectorNode of classSelectors) {
                    targetsQueryContext = targetsQueryContext.reverseQueryStep(selectorNode);
                }
                reportSelectorNodes.push(...selectorBlock);
                if (comb) {
                    if (!targetsQueryContext.elements.length) {
                        break;
                    }
                    if (targetsQueryContext.elements.some(elements_1.isRootElement)) {
                        return;
                    }
                    targetsQueryContext = targetsQueryContext.reverseQueryStep(comb);
                    reportSelectorNodes.push(comb);
                }
            }
            if (!targetsQueryContext.elements.length) {
                report(reportSelectorNodes.reverse());
            }
        }
        return {
            "Program:exit"() {
                const queryContext = query_1.createQueryContext(context, options_1.ParsedQueryOptions.parse(context.options[0]));
                for (const style of styles) {
                    for (const scopedSelector of getScopedSelectors(style)) {
                        verifySelector(queryContext, scopedSelector);
                    }
                }
            },
        };
    },
};
