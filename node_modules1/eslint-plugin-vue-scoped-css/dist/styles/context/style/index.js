"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parser_1 = require("../../parser");
const css_nodes_1 = require("../../utils/css-nodes");
function getInvalidEOFError(context, style) {
    const node = context.getSourceCode().ast;
    const body = node.templateBody;
    let errors = body === null || body === void 0 ? void 0 : body.errors;
    let inDocumentFragment = false;
    if (errors == null) {
        if (!context.parserServices.getDocumentFragment) {
            return null;
        }
        const df = context.parserServices.getDocumentFragment();
        inDocumentFragment = true;
        errors = df === null || df === void 0 ? void 0 : df.errors;
        if (errors == null) {
            return null;
        }
    }
    const error = errors.find(err => typeof err.code === "string" &&
        err.code.startsWith("eof-") &&
        style.range[0] <= err.index &&
        err.index < style.range[1]) ||
        errors.find(err => typeof err.code === "string" && err.code.startsWith("eof-"));
    if (!error) {
        return null;
    }
    return {
        error,
        inDocumentFragment,
    };
}
function getStyleElements(context) {
    let document = null;
    if (context.parserServices.getDocumentFragment) {
        document = context.parserServices.getDocumentFragment();
    }
    else {
        const sourceCode = context.getSourceCode();
        const { ast } = sourceCode;
        const templateBody = ast.templateBody;
        if (templateBody) {
            document = templateBody.parent;
        }
    }
    if (document) {
        return document.children
            .filter(isVElement)
            .filter(element => element.name === "style");
    }
    return [];
}
function isScoped(style) {
    const { startTag } = style;
    return startTag.attributes.some(attr => attr.key.name === "scoped");
}
function getLang(style) {
    var _a;
    const { startTag } = style;
    const lang = startTag.attributes.find(attr => attr.key.name === "lang") || null;
    return ((lang === null || lang === void 0 ? void 0 : lang.type) === "VAttribute" &&
        ((_a = lang.value) === null || _a === void 0 ? void 0 : _a.type) === "VLiteral" &&
        lang.value.value);
}
var StyleContext;
(function (StyleContext) {
    function isValid(context) {
        return !context.invalid;
    }
    StyleContext.isValid = isValid;
})(StyleContext = exports.StyleContext || (exports.StyleContext = {}));
class StyleContextImpl {
    constructor(style, context) {
        const sourceCode = context.getSourceCode();
        this.styleElement = style;
        this.sourceCode = sourceCode;
        const { startTag, endTag } = style;
        this.invalid = null;
        const eof = getInvalidEOFError(context, style);
        if (eof) {
            this.invalid = {
                message: eof.error.message,
                needReport: eof.inDocumentFragment,
                loc: { line: eof.error.lineNumber, column: eof.error.column },
            };
        }
        else if (endTag == null && !startTag.selfClosing) {
            this.invalid = {
                message: "Missing end tag",
                needReport: true,
                loc: startTag.loc.end,
            };
        }
        this.scoped = Boolean(style && isScoped(style));
        this.lang = ((style && getLang(style)) || "css").toLowerCase();
        if (!this.invalid) {
            this.cssText = endTag
                ? sourceCode.text.slice(startTag.range[1], endTag.range[0])
                : "";
            this.cssNode = parser_1.parse(sourceCode, startTag.loc.end, this.cssText, this.lang);
        }
        else {
            this.cssText = null;
            this.cssNode = null;
        }
    }
    traverseNodes(visitor) {
        if (this.cssNode) {
            traverseNodes(this.cssNode, visitor);
        }
    }
}
exports.StyleContextImpl = StyleContextImpl;
function traverseNodes(node, visitor) {
    visitor.break = false;
    visitor.enterNode(node);
    if (visitor.exit || visitor.break) {
        return;
    }
    if (css_nodes_1.isVCSSContainerNode(node)) {
        for (const child of node.nodes) {
            traverseNodes(child, visitor);
            if (visitor.break) {
                break;
            }
            if (visitor.exit) {
                return;
            }
        }
    }
    visitor.leaveNode(node);
}
function createStyleContexts(context) {
    const styles = getStyleElements(context);
    return styles.map(style => new StyleContextImpl(style, context));
}
exports.createStyleContexts = createStyleContexts;
function isVElement(node) {
    return (node === null || node === void 0 ? void 0 : node.type) === "VElement";
}
