"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("../../context");
const nodes_1 = require("../../utils/nodes");
function isVBind(key) {
    if (nodes_1.isVDirectiveKeyV6(key)) {
        if (key.name.name !== "bind") {
            return false;
        }
        return true;
    }
    if (key.name !== "bind") {
        return false;
    }
    return true;
}
function getArgument(key) {
    if (nodes_1.isVDirectiveKeyV6(key)) {
        const argument = key.argument;
        if (argument == null) {
            return null;
        }
        if (argument.type === "VExpressionContainer") {
            return null;
        }
        if (argument.type === "VIdentifier") {
            return argument.name;
        }
        return null;
    }
    const argument = key.argument;
    if (argument == null) {
        return null;
    }
    if (/^\[.*\]$/u.test(argument)) {
        return null;
    }
    return argument || "";
}
function getAttributeValueNodes(element, name, context) {
    const results = [];
    const { startTag } = element;
    for (const attr of startTag.attributes) {
        if (!nodes_1.isVDirective(attr)) {
            const { key, value } = attr;
            if (value == null) {
                continue;
            }
            if (key.name === name) {
                results.push(value);
            }
        }
        else {
            const { key, value } = attr;
            if (value == null) {
                continue;
            }
            if (!isVBind(key)) {
                continue;
            }
            const bindArg = getArgument(key);
            if (bindArg == null) {
                return null;
            }
            if (bindArg !== name) {
                continue;
            }
            const { expression } = value;
            if (expression == null) {
                continue;
            }
            const expressions = getReferenceExpressions(expression, context);
            if (!expressions) {
                return null;
            }
            for (const e of expressions) {
                results.push(e);
            }
        }
    }
    return results;
}
exports.getAttributeValueNodes = getAttributeValueNodes;
function getReferenceExpressions(expression, context) {
    if (expression.type !== "Identifier") {
        return [expression];
    }
    const vueComponent = context_1.getVueComponentContext(context);
    if (!vueComponent) {
        return null;
    }
    const props = vueComponent.findVueComponentProperty(expression.name);
    if (props == null) {
        return null;
    }
    return props;
}
exports.getReferenceExpressions = getReferenceExpressions;
