"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const selectors_1 = require("../../utils/selectors");
const elements_1 = require("./elements");
const attribute_tracker_1 = require("./attribute-tracker");
const context_1 = require("../../context");
const nodes_1 = require("../../utils/nodes");
const template_1 = require("../../template");
const TRANSITION_CLASS_BASES = [
    "enter",
    "enter-active",
    "enter-to",
    "leave",
    "leave-active",
    "leave-to",
];
const TRANSITION_GROUP_CLASS_BASES = [...TRANSITION_CLASS_BASES, "move"];
class QueryContext {
    constructor(document) {
        this.elements = [];
        this.document = document || this;
    }
    queryStep(selectorNode) {
        return new ElementsQueryContext(queryStep(this.elements, selectorNode, this.document), this.document);
    }
    reverseQueryStep(selectorNode) {
        return new ElementsQueryContext(reverseQueryStep(this.elements, selectorNode, this.document), this.document);
    }
    filter(predicate) {
        return new ElementsQueryContext(this.elements.filter(predicate), this.document);
    }
    split() {
        return this.elements.map(e => new ElementsQueryContext([e], this.document));
    }
}
exports.QueryContext = QueryContext;
class VueDocumentQueryContext extends QueryContext {
    constructor(context, options) {
        super();
        const sourceCode = context.getSourceCode();
        const { ast } = sourceCode;
        this.elements = ast.templateBody
            ? [...genDescendantElements([ast.templateBody])]
            : [];
        this.context = context;
        this.options = options;
        if (options.captureClassesFromDoc.length > 0) {
            this.docsModifiers = context_1.getStyleContexts(context)
                .filter(context_1.StyleContext.isValid)
                .filter(style => style.scoped)
                .map(style => extractClassesFromDoc(style, options.captureClassesFromDoc))
                .reduce((r, a) => r.concat(a), []);
        }
        else {
            this.docsModifiers = [];
        }
    }
}
function extractClassesFromDoc(style, captureClassesFromDoc) {
    const results = new Set();
    for (const comment of style.cssNode.comments) {
        for (const regexp of captureClassesFromDoc) {
            regexp.lastIndex = 0;
            let re;
            while ((re = regexp.exec(comment.text))) {
                if (re.length > 1) {
                    for (const s of re.slice(1)) {
                        results.add(s);
                    }
                }
                else {
                    results.add(re[0]);
                }
            }
        }
    }
    return [...results];
}
class ElementsQueryContext extends QueryContext {
    constructor(elements, document) {
        super(document);
        this.elements = [...elements];
    }
}
function createQueryContext(context, options) {
    return new VueDocumentQueryContext(context, options);
}
exports.createQueryContext = createQueryContext;
function* queryStep(elements, selectorNode, document) {
    if (selectors_1.isSelectorCombinator(selectorNode)) {
        if (selectors_1.isChildCombinator(selectorNode)) {
            yield* genChildElements(elements);
            return;
        }
        else if (selectors_1.isDescendantCombinator(selectorNode) ||
            selectors_1.isDeepCombinator(selectorNode)) {
            yield* genDescendantElements(elements);
            return;
        }
        else if (selectors_1.isAdjacentSiblingCombinator(selectorNode)) {
            yield* genAdjacentSiblingElements(elements);
            return;
        }
        else if (selectors_1.isGeneralSiblingCombinator(selectorNode)) {
            yield* genGeneralSiblingElements(elements);
            return;
        }
    }
    if (selectors_1.isTypeSelector(selectorNode)) {
        yield* genElementsByTagName(elements, template_1.Template.ofSelector(selectorNode));
        return;
    }
    else if (selectors_1.isIDSelector(selectorNode)) {
        yield* genElementsById(elements, template_1.Template.ofSelector(selectorNode), document);
        return;
    }
    else if (selectors_1.isClassSelector(selectorNode)) {
        yield* genElementsByClassName(elements, template_1.Template.ofSelector(selectorNode), document);
        return;
    }
    else if (selectors_1.isUniversalSelector(selectorNode)) {
        yield* elements;
        return;
    }
    yield* elements;
}
function* reverseQueryStep(elements, selectorNode, document) {
    if (selectors_1.isSelectorCombinator(selectorNode)) {
        if (selectors_1.isChildCombinator(selectorNode)) {
            yield* genParentElements(elements);
            return;
        }
        else if (selectors_1.isDescendantCombinator(selectorNode) ||
            selectors_1.isDeepCombinator(selectorNode)) {
            yield* genAncestorElements(elements);
            return;
        }
        else if (selectors_1.isAdjacentSiblingCombinator(selectorNode)) {
            yield* genPrevAdjacentSiblingElements(elements);
            return;
        }
        else if (selectors_1.isGeneralSiblingCombinator(selectorNode)) {
            yield* genPrevGeneralSiblingElements(elements);
            return;
        }
    }
    yield* queryStep(elements, selectorNode, document);
}
function* genDescendantElements(elements) {
    const found = new Set();
    for (const e of genChildElements(elements)) {
        yield e;
        found.add(e);
        for (const p of genDescendantElements([e])) {
            if (!found.has(p)) {
                yield p;
                found.add(p);
            }
        }
    }
}
function* genAncestorElements(elements) {
    const found = new Set();
    for (const e of genParentElements(elements)) {
        yield e;
        found.add(e);
        for (const a of genAncestorElements([e])) {
            if (!found.has(a)) {
                yield a;
                found.add(a);
            }
        }
    }
}
function* genChildElements(elements) {
    for (const element of elements) {
        for (const e of element.children.filter(isVElement)) {
            if (elements_1.isSkipElement(e)) {
                yield* genChildElements([e]);
            }
            else if (elements_1.isSlotElement(e)) {
                yield* genChildElements([e]);
                yield newVElement(e, "component");
            }
            else {
                yield e;
            }
        }
    }
}
function* genParentElements(elements) {
    const found = new Set();
    for (const element of elements) {
        const parent = elements_1.getParentElement(element);
        if (parent) {
            if (!found.has(parent)) {
                yield parent;
                found.add(parent);
            }
        }
    }
}
function* genAdjacentSiblingElements(elements) {
    for (const element of elements) {
        const parent = elements_1.getParentElement(element);
        if (parent == null) {
            continue;
        }
        const children = [...genChildElements([parent])];
        const index = children.indexOf(element);
        const e = children[index + 1];
        if (e) {
            yield e;
        }
    }
}
function* genPrevAdjacentSiblingElements(elements) {
    for (const element of elements) {
        const parent = elements_1.getParentElement(element);
        if (parent == null) {
            continue;
        }
        const children = [...genChildElements([parent])];
        const index = children.indexOf(element);
        const e = children[index - 1];
        if (e) {
            yield e;
        }
    }
}
function* genGeneralSiblingElements(elements) {
    const found = new Set();
    for (const element of elements) {
        const parent = elements_1.getParentElement(element);
        if (parent == null) {
            continue;
        }
        const children = [...genChildElements([parent])];
        const index = children.indexOf(element);
        for (const n of children.slice(index + 1)) {
            if (!found.has(n)) {
                yield n;
                found.add(n);
            }
        }
    }
}
function* genPrevGeneralSiblingElements(elements) {
    const found = new Set();
    for (const element of elements) {
        const parent = elements_1.getParentElement(element);
        if (parent == null) {
            continue;
        }
        const children = [...genChildElements([parent])];
        const index = children.indexOf(element);
        for (const p of children.slice(0, index)) {
            if (!found.has(p)) {
                yield p;
                found.add(p);
            }
        }
    }
}
function* genElementsByTagName(elements, tagName) {
    for (const element of elements) {
        if (element.name === "component") {
            yield element;
        }
        else if (tagName.toLowerCase().matchString(element.name)) {
            yield element;
        }
    }
}
function* genElementsById(elements, id, document) {
    for (const element of elements) {
        if (matchId(element, id, document)) {
            yield element;
        }
    }
}
function* genElementsByClassName(elements, className, document) {
    let removeModifierClassName = null;
    if (document.options.ignoreBEMModifier) {
        if (className.hasString("--")) {
            const list = className.divide("--");
            list.pop();
            if (list.length) {
                removeModifierClassName = list.reduce((r, a) => r.concat(a));
            }
        }
    }
    for (const docMod of document.docsModifiers) {
        if (docMod.startsWith(":")) {
            continue;
        }
        const modClassName = docMod.startsWith(".")
            ? docMod.slice(1)
            : docMod;
        if (className.matchString(modClassName)) {
            yield* elements;
            return;
        }
        else if (removeModifierClassName) {
            if (removeModifierClassName.matchString(modClassName)) {
                yield* elements;
                return;
            }
        }
    }
    for (const element of elements) {
        if (matchClassName(element, className, document)) {
            yield element;
        }
        else if (removeModifierClassName &&
            matchClassName(element, removeModifierClassName, document)) {
            yield element;
        }
    }
}
function matchId(element, id, document) {
    const nodes = attribute_tracker_1.getAttributeValueNodes(element, "id", document.context);
    if (nodes == null) {
        return true;
    }
    for (const node of nodes) {
        const value = template_1.Template.ofNode(node);
        if (value == null) {
            return true;
        }
        if (value.match(id)) {
            return true;
        }
    }
    return false;
}
function matchClassName(element, className, document) {
    if (elements_1.isElementWrappedInTransition(element)) {
        const transition = elements_1.getWrapperTransition(element);
        if (transition != null &&
            matchTransitionClassName(transition, className, document)) {
            return true;
        }
    }
    const nodes = attribute_tracker_1.getAttributeValueNodes(element, "class", document.context);
    if (nodes == null) {
        return true;
    }
    for (const node of nodes) {
        if (node.type === "VLiteral") {
            if (includesClassName(node.value, className)) {
                return true;
            }
        }
        else if (matchClassNameExpression(node, className, document)) {
            return true;
        }
    }
    const refNames = getRefNames(element, document);
    const vueComponent = context_1.getVueComponentContext(document.context);
    if (vueComponent &&
        vueComponent
            .getClassesOperatedByClassList(refNames, elements_1.isRootElement(element))
            .filter((n => n.type === "Literal"))
            .some(n => matchClassNameExpression(n, className, document))) {
        return true;
    }
    return false;
}
function getRefNames(element, document) {
    const refNameNodes = attribute_tracker_1.getAttributeValueNodes(element, "ref", document.context);
    if (refNameNodes == null) {
        return null;
    }
    const refNames = [];
    for (const refNameNode of refNameNodes) {
        const refName = template_1.Template.ofNode(refNameNode);
        if (refName == null) {
            return null;
        }
        refNames.push(refName);
    }
    return refNames;
}
function matchTransitionClassName(element, className, document) {
    const classBases = elements_1.isTransitionElement(element)
        ? TRANSITION_CLASS_BASES
        : TRANSITION_GROUP_CLASS_BASES;
    const nameNodes = attribute_tracker_1.getAttributeValueNodes(element, "name", document.context);
    for (const classBase of classBases) {
        const classNameNodes = attribute_tracker_1.getAttributeValueNodes(element, `${classBase}-class`, document.context);
        if (classNameNodes == null) {
            return true;
        }
        if (classNameNodes.length) {
            for (const classNameNode of classNameNodes) {
                const value = template_1.Template.ofNode(classNameNode);
                if (value == null) {
                    return true;
                }
                if (value.match(className)) {
                    return true;
                }
            }
        }
        else if (nameNodes == null) {
            if (className.endsWith(`-${classBase}`)) {
                return true;
            }
        }
        else if (nameNodes.length === 0) {
            if (className.matchString(`v-${classBase}`)) {
                return true;
            }
        }
        else {
            for (const nameNode of nameNodes) {
                const name = template_1.Template.ofNode(nameNode);
                if (name == null) {
                    return true;
                }
                if (className.match(name.concat(`-${classBase}`))) {
                    return true;
                }
            }
        }
    }
    return false;
}
function matchClassNameExpression(expression, className, document) {
    const literal = template_1.Template.ofNode(expression);
    if (literal != null) {
        if (includesClassName(literal, className)) {
            return true;
        }
    }
    else if (expression.type === "Identifier") {
        const string = nodes_1.getStringFromNode(expression, document.context);
        if (string == null) {
            return true;
        }
        if (includesClassName(string, className)) {
            return true;
        }
    }
    else if (expression.type === "ArrayExpression") {
        if (matchClassNameForArrayExpression(expression, className, document)) {
            return true;
        }
    }
    else if (expression.type === "ObjectExpression") {
        if (matchClassNameForObjectExpression(expression, className, document)) {
            return true;
        }
    }
    else {
        return true;
    }
    return false;
}
function matchClassNameForArrayExpression(expression, className, document) {
    for (const e of expression.elements) {
        if (e.type === "Identifier") {
            if (withinTemplate(e, document)) {
                const expressions = attribute_tracker_1.getReferenceExpressions(e, document.context);
                if (expressions) {
                    for (const e2 of expressions) {
                        if (matchClassNameExpression(e2, className, document)) {
                            return true;
                        }
                    }
                }
            }
            else {
                if (matchClassNameExpression(e, className, document)) {
                    return true;
                }
            }
        }
        else if (e.type === "SpreadElement") {
            if (matchClassNameExpression(e.argument, className, document)) {
                return true;
            }
        }
        else if (matchClassNameExpression(e, className, document)) {
            return true;
        }
    }
    return false;
}
function matchClassNameForObjectExpression(expression, className, document) {
    for (const prop of expression.properties) {
        if (prop.type !== "Property") {
            return true;
        }
        if (prop.computed) {
            if (prop.key.type === "Identifier" ||
                prop.key.type === "Literal" ||
                prop.key.type === "TemplateLiteral" ||
                prop.key.type === "BinaryExpression") {
                if (matchClassNameExpression(prop.key, className, document)) {
                    return true;
                }
            }
            else {
                return true;
            }
        }
        else {
            if (prop.key.type === "Identifier") {
                if (includesClassName(prop.key.name, className)) {
                    return true;
                }
            }
            else if (prop.key.type === "Literal") {
                if (includesClassName(`${prop.key.value}`, className)) {
                    return true;
                }
            }
        }
    }
    return false;
}
function newVElement(element, name) {
    const startTag = element.startTag;
    const endTag = element.endTag;
    const newElement = {
        type: "VElement",
        name,
        startTag: {
            type: "VStartTag",
            attributes: [],
            selfClosing: startTag.selfClosing,
            parent: element,
            loc: startTag.loc,
            start: startTag.start,
            end: startTag.end,
            range: startTag.range,
        },
        endTag: endTag
            ? {
                type: "VEndTag",
                parent: element,
                loc: endTag.loc,
                start: endTag.start,
                end: endTag.end,
                range: endTag.range,
            }
            : null,
        parent: element,
        namespace: element.namespace,
        rawName: name,
        variables: element.variables,
        children: [],
        loc: element.loc,
        start: element.start,
        end: element.end,
        range: element.range,
    };
    newElement.startTag.parent = newElement;
    if (newElement.endTag) {
        newElement.endTag.parent = newElement;
    }
    return newElement;
}
function isVElement(node) {
    return (node === null || node === void 0 ? void 0 : node.type) === "VElement";
}
function includesClassName(value, className) {
    if (typeof value === "string") {
        return value.split(/\s+/u).some(s => className.matchString(s));
    }
    return value.divide(/\s+/u).some(s => className.match(s));
}
function withinTemplate(expr, document) {
    var _a;
    const templateBody = document.context.getSourceCode().ast.templateBody;
    const templateRange = (_a = templateBody === null || templateBody === void 0 ? void 0 : templateBody.range) !== null && _a !== void 0 ? _a : [0, 0];
    return (templateRange[0] <= expr.range[0] && expr.range[1] <= templateRange[1]);
}
